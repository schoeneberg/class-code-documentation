Semi-Autogenerated Wrapper
==========================

Introduction
------------

THIS IS NOT YET IMPLEMENTED, BUT WILL BE PART OF A FUTURE RELEASE!

This project provides a collection of Python scripts that **automatically generate parts of the Python wrapper Classy**. Specifically, it creates the
``cclassy_auto.pxd`` file and key portions of the ``classy_auto.pyx`` file required for building a Cython interface. All functions that are not directly
wrapping the C code are contained in ``classy.py`` which is the head piece of the Python package and exposes everything that is wrapped. The tool works
by **parsing C header files** that contain all relevant function declarations, ``struct`` definitions, and ``enum`` values.

- **All external C functions** — defined before the ``init`` function of each module — are **automatically wrapped** (i.e., made accessible from Python). See the section on `classy_auto_gen/generated/ <classy-auto-gen-generated_>`_ for more information.
- **All non-pointer fields** of main ``struct`` types are wrapped and made available as Python-accessible object attributes. These are detailed in the `classy/ <classy_>`_ section.
- **All enums** are converted into Python constants and exposed. See the `classy_dicts.pyx <classy-auto-gen-generated_>`_ section for how this is structured.

The goal is to **minimize user effort**: only a small YAML configuration file is needed to specify special pointer handling and overrides. See the `special_pointers.yaml <special_pointers_yaml_>`_ section for details on how to use it.

Folders and Files
-----------------

.. note::

   Below is a breakdown of the most relevant folders and files used in or generated by this project. This should help you understand what is editable, what is generated, and how different components relate.

.. code-block:: text

    python/
    ├── classy/
    │   ├── __init__.py
    │   ├── cclassy.pxd
    │   ├── classy_auto.pyx
    │   ├── classy.py
    │   ├── classy_auto_gen/
    └── classy_auto_gen/
        ├── generated/
        │   ├── classy_dicts.pyx
        │   └── classy_wrapped_C.pyx
        ├── generator/
        │   ├── generate_dict.py
        │   ├── generate_main.py
        │   ├── generate_pxd.py
        │   ├── generate_pyx.py
        │   └── special_pointers.yaml
        └── classy_infrastructure.pyx


.. _classy:
``classy/``
^^^^^^^^^^^

This folder contains the Python package that serves as the interface to the wrapped C code. It includes:

- ``__init__.py`` – Marks the folder as a Python package.
- ``classy.py`` – The main user-facing Python file. This file can be modified by the user and exposes the high-level API.
- ``classy_auto.pyx`` – Semi-automatically generated Cython file, built from multiple generated pieces and **should not be edited manually**.
- ``cclassy_auto.pxd`` – The corresponding Cython declarations file, automatically generated and **should not be edited manually**.

``classy_auto_gen/``
^^^^^^^^^^^^^^^^^^^^

This folder contains all logic and files for generating the wrapper. It includes:

- ``classy_infrastructure.pyx`` – A foundational Cython file that defines utility macros, constants, and shared infrastructure for the wrapper.
- ``classy_auto_gen/generated/`` – Contains auto-generated temporary files (see below).
- ``classy_auto_gen/generator/`` – Contains Python scripts that perform the code generation (see below).


.. _classy-auto-gen-generated:
``classy_auto_gen/generated/``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This folder contains **automatically generated files** that support the wrapper:

- ``classy_dicts.pyx`` – Contains Python-accessible dictionaries holding enums and non-pointer struct fields. These can be accessed using the typical CLASS style. For example: ``self.ba.h`` accesses the reduced Hubble parameter as it is contained in the background struct.
- ``classy_wrapped_C.pyx`` – Contains all wrapped external C functions, with names identical to the originals in CLASS (e.g., ``background_at_z``). These functions are accessible both from ``classy.py`` and directly when importing the package (e.g., in notebooks). When extending existing CLASS files, it is important to follow CLASS conventions. Otherwise, the functions cannot be wrapped automatically.

``classy_auto_gen/generator/``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This folder includes the **Python scripts responsible for generating the Cython wrapper code**. These are:

- ``generate_pxd.py`` – Generates the ``cclassy_auto.pxd`` file and places it into the ``classy/`` folder.
- ``generate_dict.py`` – Creates ``classy_dicts.pyx`` with dictionaries for enums and struct fields; output goes into ``classy_auto_gen/generated/``.
- ``generate_pyx.py`` – Produces ``classy_wrapped_C.pyx`` for all external C functions; output also goes into ``classy_auto_gen/generated/``.
- ``generate_main.py`` – A controller script that sequentially runs the above three generators and then **concatenates** ``classy_infrastructure.pyx``, ``classy_dicts.pyx``, and ``classy_wrapped_C.pyx`` into the final ``classy_auto.pyx`` file.
- ``special_pointers.yaml`` – A user-editable YAML file to specify how to handle special pointers and memory allocation (explained in detail below).

.. _special_pointers_yaml:
``special_pointers.yaml``
~~~~~~~~~~~~~~~~~~~~~~~~~

This file serves as the main **user interface to control how special C pointers are handled** during the automatic generation process. It allows you to define, for each C function, which pointers require memory allocation, how they are sized, and whether they are input-only.

The file is structured as a dictionary grouped by C module name. Each module contains a list of function entries, and each entry specifies relevant pointer-handling fields.

.. code-block:: yaml

    example_module:

      - function:           "example_function"
        malloc_pointers:    ["pointer_1", "pointer_2", "pointer_3"]
        malloc_sizes:       [["size11", "size12"], ["size21"], []]
        exact_malloc_sizes: [[], [], ["input_size31"]]
        input_pointers:     ["input_vec"]

The following keys are supported for each function:

- **function**:
  The name of the C function the rule applies to.

- **malloc_pointers** *(optional)*:
  A list of pointer names that need to be allocated in Python before calling the C function.

- **malloc_sizes** *(optional)*:
  A nested list describing the *(possibly multiple)* sizes for each pointer in `malloc_pointers`. Each size must be accessible from the **same module's main struct**, e.g., ``self.fo.k_size`` for the Fourier module. In the presented example, ``size11`` and ``size12`` must be contained in the main struct from the ``example module``. If a pointer is one-dimensional, provide a list with one size. If it is 2D, provide two. If a pointer does not require a known size (e.g., the size passed directly to the function), leave the inner list empty or omit this key entirely, and specify the size in ``exact_malloc_sizes``.

- **exact_malloc_sizes** *(optional)*:
  Use this when the size is **not stored in the current module's struct**, or when a custom size reference is needed. Each list item corresponds to a pointer from `malloc_pointers`. This value can be:
  
  - A name of a function argument (e.g., ``input_size``),
  - A full attribute path like ``self.fo.k_size`` (when the size is in another module’s struct).


    .. note::
        ``malloc_sizes`` and ``exact_malloc_sizes`` are both optional. If all size information is provided via ``malloc_sizes``, then ``exact_malloc_sizes`` can be omitted — and vice versa.

- **input_pointers** *(optional)*:
  A list of pointer names that are **inputs to the C function** (e.g., arrays provided by the user). These do not require memory allocation and are simply passed into the wrapper function.
